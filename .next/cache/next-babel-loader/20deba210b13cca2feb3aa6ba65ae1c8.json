{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default function useStats(url) {\n  const {\n    0: stats,\n    1: setStats\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url).then(data => data.json()).catch(err => {\n        setError(err);\n      });\n      setStats(data);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    stats,\n    loading,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/gergonagy/work/coronaVirus/utils/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fetchData","data","fetch","then","json","catch","err"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,EAAlC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeS,SAAf,GAA2B;AACzBH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ;AACR,YAAME,IAAI,GAAG,MAAMC,KAAK,CAACT,GAAD,CAAL,CAChBU,IADgB,CACXF,IAAI,IAAIA,IAAI,CAACG,IAAL,EADG,EAEhBC,KAFgB,CAEVC,GAAG,IAAI;AACZP,QAAAA,QAAQ,CAACO,GAAD,CAAR;AACD,OAJgB,CAAnB;AAKAX,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDG,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACP,GAAD,CAbM,CAAT;AAcA,SAAO;AACLC,IAAAA,KADK;AAELE,IAAAA,OAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useState, useEffect } from 'react';\nexport default function useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url)\n        .then(data => data.json())\n        .catch(err => {\n          setError(err);\n        });\n      setStats(data);\n      setLoading(false);\n    }\n    fetchData();\n  }, [url]);\n  return {\n    stats,\n    loading,\n    error,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}